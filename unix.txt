1a:

#include<stdio.h>
#include<fcntl.h>
#include<unistd.h>

int main(){
int fd = open("file.txt",O_RDONLY);
int size = lseek(fd,0,SEEK_END);
char ch;
while(size--){
	lseek(fd,size,SEEK_SET);
	read(fd,&ch,1);
	putchar(ch);
}
close(fd);
return 0;
}

1b:


#include<stdio.h>
#include<fcntl.h>
#include<unistd.h>
#include<sys/wait.h>

int main(){
        int fd=open("source.txt" , O_RDONLY);
        int pid=fork();
        char buffer[10];
        if(pid==0){
                read(fd,buffer,10);
                buffer[10]='\0';
                printf("Child Process is : %s\n ", buffer);

        }
        else{
                wait(NULL); //wait for child to finish
                read(fd,buffer,10);
                buffer[10]='\0';
                printf("Parent Process is : %s\n", buffer);
        }
        close(fd);
        return 0;
}

2a:

#include<stdio.h>
#include<sys/stat.h>
int main(){
        struct stat ft;
        stat("source.txt" , &ft);
        printf("Size is :  %ld\n", ft.st_size);
        printf("Access time is :  %ld\n", ft.st_atime);
        printf("Inode is :  %ld\n", ft.st_ino);
        printf("No. of links is :  %ld\n", ft.st_nlink);
        printf("Modification Time is :  %ld\n", ft.st_mtime);
        return 0;
}



2b:


#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>


void printflags(int fd){
        int flags=fcntl(fd , F_GETFL);
        printf("flags for file descriptor : %d\n" , fd);
        printf("O_APPEND : %s\n" , (flags & O_APPEND) ? "yes" : "NO");
        printf("O_SYNC : %s\n" , (flags & O_SYNC) ? "yes" : "NO");
        printf("O_NONBLOCK : %s\n" , (flags & O_NONBLOCK) ? "yes" : "NO");
}

int main(int argc , char *argv[]){
        if(argc!=2){
                printf("Error !! ");
                return 0;
        }
        int fd=atoi(argv[1]);
        printflags(fd);

}


3a:



#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include<sys/wait.h>

int main(){
        execl("/bin/sh" , "sh","-c" ,"ls -l", (char *)0 );
        return 0;
}




3b:




#include<stdio.h>
#include<stdlib.h>
#include<dirent.h>
#include<sys/stat.h>

int main(){
        struct dirent *entry;
        struct stat filestat;
        DIR *dir=opendir(".");

        while((entry=readdir(dir))!=NULL){
        stat(entry->d_name , &filestat);
        printf("%ld %ld %d %d %s\n" ,
                        filestat.st_ino,
                        filestat.st_nlink,
                        filestat.st_uid,
                        filestat.st_gid,
                        entry->d_name);
        }
        return 0;
}


5a

#include<stdio.h>
#include<stdlib.h>
#include<utime.h>
#include<sys/stat.h>
int main(){
        struct stat filestat;
        stat("file1.txt" , &filestat);
        struct utimbuf newtime;
        newtime.modtime=filestat.st_mtime;
        newtime.actime=filestat.st_atime;
        utime("file2.txt" , &newtime);
        return 0;
}

5b
#include <stdio.h>
#include <stdlib.h>
#include <signal.h>
#include<unistd.h>
void handle_sigint(int sig) {
        printf("Caught SIGINT\n");
        signal(SIGINT, SIG_DFL);
}

int main() {
        struct sigaction sa;
        sa.sa_handler = handle_sigint;
        sigaction(SIGINT, &sa, NULL);

        while (1) {
                printf("Running...\n");
                sleep(1);
        }

        return 0;
}



6a8a


#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<sys/stat.h>
#include<fcntl.h>
#include<dirent.h>
int main(){
        struct dirent *entry;
        DIR *dir;
        struct stat fs;
        dir=opendir(".");
        while((entry=readdir(dir))!=NULL){
                stat(entry->d_name , &fs);
                if(fs.st_size==0){
                        printf("Empty Files Are %s\n", entry->d_name);
                        remove(entry->d_name);
                }

        }
        return 0;
}





7a 


#include<stdio.h>
#include<stdlib.h>
#include<setjmp.h>
#include<unistd.h>

jmp_buf buf;

int main(){
        volatile int x=10;
        register int y=20;

        printf("Initail Values of x y is : %d %d",x,y);

        if(setjmp(buf)!=0){
                printf("New Values: X: %d Y: %d \n",x,y);
                return(0);
        }

        x=30;
        y=60;
        longjmp(buf,1);
        return 0;
}




7b


#include<stdio.h>
#include<stdlib.h>
#include<fcntl.h>
#include<unistd.h>

int main(int argc , char *argv[]){
        int src=open(argv[1],O_RDONLY);
        int dest=open(argv[2],O_WRONLY|O_CREAT|O_TRUNC,0644); //PERMISSION
        char buf[4096];
        ssize_t bytesread;
        while((bytesread=read(src,buf,sizeof(buf)))>0){
                write(dest,buf,bytesread);
        }
        close(src);
        close(dest);
        return 0;
}


8b


#include<stdio.h>
#include<unistd.h>
#include<fcntl.h>
#include<sys/wait.h>

int main(){
int pid = fork();
if(pid<0){
printf("error");
}
else if(pid == 0){
printf("child process execution started ids are  (PID: %d, PPID: %d)\n",getpid(),getppid());
const char * fp = "file.txt";
if(access(fp,F_OK)==0){
printf("child process can access file1.txt");
}
if (access(fp, R_OK) == 0) {
 printf("Child Process: File %s is readable.\n", fp);}
}
else{
wait(NULL);
printf("Parent Process (PID: %d): Child process (PID: %d) exited.\n", getpid(), pid);
}
returnÂ 0;
}


9a

#include<stdio.h>
#include<fcntl.h>
#include<sys/stat.h>
#include<unistd.h>

int main(){
mode_t old_mask = umask(0);
int fd = open("file1.txt",O_CREAT,0666);
close(fd);
chmod("file1.txt",0644);
struct stat fs;
stat("file1.txt",&fs);
printf("File permissions: %o\n", fs.st_mode & 0777);
umask(old_mask);
return 0;
}


9b
 
#include <stdio.h>
#include <fcntl.h>
#include <unistd.h>
#include <sys/stat.h>

int main() {
    int fd = open("file.txt", O_RDONLY);
    char buffer[21];
    int size;

    // Read first 20 characters
    size = read(fd, buffer, 20);
    buffer[size] = '\0';
    printf("First 20 characters: %s\n", buffer);

    // Seek to 10th byte from the beginning and display 20 characters
    lseek(fd, 10, SEEK_SET);
    size = read(fd, buffer, 20);
    buffer[size] = '\0';
    printf("Seek to 10th byte from the beginning and display 20 characters: %s\n", buffer);

    // Seek 10 bytes ahead from the current file offset and display 20 characters
    lseek(fd, 10, SEEK_CUR);
    size = read(fd, buffer, 20);
    buffer[size] = '\0';
    printf("Characters after 10 bytes ahead: %s\n", buffer);

    // Display the file size
    struct stat fs;
    fstat(fd, &fs);  // Using fstat to get file info using file descriptor
    printf("File size is: %ld bytes\n", fs.st_size);

    close(fd);
    return 0;
}


10a

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <fcntl.h>
void deamon()
{
        pid_t pid;
        pid=fork();
        if(pid>0)
        {
                printf("\nPID of child : %d\n",pid);
                exit(0);
        }
        umask(0);
        if(chdir("/")<0)
                printf("error");
        if(setsid()<0)
                printf("error");
        printf("Created deamon");
}
